<div class="@(string.IsNullOrEmpty(Class) ? "flex-1 flex items-center justify-center sm:items-stretch sm:justify-start" : Class)">
    @ChildContent
</div>

@code {
    /// <summary>
    /// The left items container class.
    /// Default class: flex-1 flex items-center justify-center sm:items-stretch sm:justify-start
    /// </summary>
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public NavLogoInformation LogoInformation { get; set; }

    [Parameter]
    public List<NavItem> Items { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Inject]
    NavigationManager _navManager { get; set; }

    string relativePath = "";

    protected override void OnInitialized()
    {
        OnLocationChanged(null, null);

        // hook to OnLocationChanged() so we can change the active class for the element
        _navManager.LocationChanged += OnLocationChanged;

        if (ChildContent == null)
            BuildNavItems(Items);
    }

    /// <summary>
    /// Build the renderfragment for the left of the nav bar
    /// </summary>
    /// <param name="navItems">a list of nav items</param>
    void BuildNavItems(List<NavItem> navItems)
    {
        if (LogoInformation != null)
        {
            RenderFragment navLogo = Helpers.BuildNavLogoFragment(LogoInformation);
            ChildContent += navLogo;
        }

        RenderFragment item = i =>
        {
            i.OpenElement(0, "div");
            i.AddAttribute(1, "class", "hidden sm:block sm:ml-6");
            i.OpenElement(2, "div");
            i.AddAttribute(3, "class", "flex space-x-4");

            foreach (var navItem in navItems)
            {
                var buildNavItem = Helpers.BuildNavItemFragment(navItem, relativePath);
                i.AddContent(4, buildNavItem);
            }

            i.CloseElement();
            i.CloseElement();
        };

        ChildContent += item;
        StateHasChanged();
    }

    /// <summary>
    /// A listener when the location has changed,
    /// sets the relative path state variable to change the active class for the element on the nav bar
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        relativePath = _navManager.ToBaseRelativePath(_navManager.Uri);
        StateHasChanged();
    }
}
